[package]
name = "firezone-headless-client"
# mark:next-headless-version
version = "1.4.6"
edition = { workspace = true }
authors = ["Firezone, Inc."]
license = { workspace = true }
# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
anyhow = { workspace = true }
atomicwrites = { workspace = true } # Needed to safely backup `/etc/resolv.conf` and write the device ID on behalf of `gui-client`
backoff = { workspace = true }
clap = { workspace = true, features = ["derive", "env", "string"] }
connlib-client-shared = { workspace = true }
connlib-model = { workspace = true }
dns-types = { workspace = true }
firezone-bin-shared = { workspace = true }
firezone-logging = { workspace = true }
firezone-telemetry = { workspace = true }
futures = { workspace = true }
humantime = { workspace = true }
ip-packet = { workspace = true }
ip_network = { workspace = true }
phoenix-channel = { workspace = true }
rustls = { workspace = true }
secrecy = { workspace = true }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
serde_variant = { workspace = true }
smbios-lib = { workspace = true }
strum = { workspace = true }
thiserror = { workspace = true }
# This actually relies on many other features in Tokio, so this will probably
# fail to build outside the workspace. <https://github.com/firezone/firezone/pull/4328#discussion_r1540342142>
tokio = { workspace = true, features = ["macros", "signal", "process", "time", "fs", "rt"] }
tokio-stream = { workspace = true }
tokio-util = { workspace = true, features = ["codec"] }
tracing = { workspace = true }
tracing-subscriber = { workspace = true, features = ["env-filter"] }
url = { workspace = true }
uuid = { workspace = true, features = ["std", "v4", "serde"] }

[dev-dependencies]
tempfile = { workspace = true }

[target.'cfg(target_os = "linux")'.dev-dependencies]
mutants = "0.0.3" # Needed to mark functions as exempt from `cargo-mutants` testing

[target.'cfg(target_os = "linux")'.dependencies]
dirs = { workspace = true }
libc = { workspace = true }
nix = { workspace = true, features = ["fs", "user", "socket"] }
resolv-conf = { workspace = true }
rtnetlink = { workspace = true }
sd-notify = "0.4.5" # This is a pure Rust re-implementation, so it isn't vulnerable to CVE-2024-3094

[target.'cfg(target_os = "macos")'.dependencies]
dirs = { workspace = true }

[target.'cfg(target_os = "windows")'.dependencies]
ipconfig = "0.3.2"
itertools = { workspace = true }
known-folders = { workspace = true }
windows-service = "0.7.0"
winreg = { workspace = true }

[target.'cfg(windows)'.dependencies.windows]
workspace = true
features = [
  # For DNS control and route control
  "Win32_Foundation",
  "Win32_NetworkManagement_IpHelper",
  "Win32_NetworkManagement_Ndis",
  "Win32_Networking_WinSock",

  "Win32_Security", # For named pipe IPC
  "Win32_System_GroupPolicy", # For NRPT when GPO is used
  "Win32_System_SystemInformation", # For uptime
  "Win32_System_SystemServices",
  "Win32_System_Pipes",
]

[lints]
workspace = true
