---
name: "Setup Rust"
description: "Sets up the correct Rust version and caching via sccache and a GCP backend"
inputs:
  targets:
    description: "Additional targets to install"
    required: false
    default: ""

outputs:
  bench-packages:
    description: Benchmarkable packages for the current OS
    value: ${{
      (runner.os == 'Linux' && '--help') ||
      (runner.os == 'macOS' && '--help') ||
      (runner.os == 'Windows' && '-p firezone-bin-shared') }}
  compile-packages:
    description: Compilable packages for the current OS
    value: ${{
      (runner.os == 'Linux' && '--workspace') ||
      (runner.os == 'macOS' && '--workspace --exclude ebpf-turn-router --exclude gui-smoke-test --exclude android-client-ffi') ||
      (runner.os == 'Windows' && '--workspace --exclude ebpf-turn-router --exclude apple-client-ffi --exclude android-client-ffi') }}
  test-packages:
    description: Testable packages for the current OS
    value: ${{
      (runner.os == 'Linux' && '--workspace') ||
      (runner.os == 'macOS' && '-p apple-client-ffi -p client-shared -p firezone-tunnel -p snownet') ||
      (runner.os == 'Windows' && '-p client-shared -p connlib-model -p firezone-bin-shared -p firezone-gui-client -p firezone-headless-client -p firezone-logging -p firezone-telemetry -p firezone-tunnel -p gui-smoke-test -p http-test-server -p ip-packet -p phoenix-channel -p snownet -p socket-factory -p tun') }}
  nightly_version:
    description: The nightly version of Rust
    value: ${{ steps.nightly.outputs.nightly }}

runs:
  using: "composite"
  steps:
    - id: auth
      uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
      with:
        workload_identity_provider: "projects/397012414171/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions"
        service_account: "github-actions@github-iam-387915.iam.gserviceaccount.com"
        export_environment_variables: true
        create_credentials_file: true
    - run: |
        echo "SCCACHE_GCS_BUCKET=firezone-staging-sccache" >> $GITHUB_ENV
        echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> $GITHUB_ENV
      shell: bash
    - uses: mozilla-actions/sccache-action@2e7f9ec7921547d4b46598398ca573513895d0bd # v0.0.4
    - run: echo "RUSTC_WRAPPER=$SCCACHE_PATH" >> $GITHUB_ENV
      shell: bash

    - name: Disable Windows Defender
      if: ${{ runner.os == 'Windows' }}
      run: Set-MpPreference -DisableRealtimeMonitoring $true
      shell: powershell

    - name: Extract Rust version
      run: |
        RUST_TOOLCHAIN=$(grep 'channel' rust-toolchain.toml | awk -F '"' '{print $2}')
        echo "RUST_TOOLCHAIN=$RUST_TOOLCHAIN" >> $GITHUB_ENV
      shell: bash
      working-directory: ./rust
    - uses: dtolnay/rust-toolchain@a54c7afa936fefeb4456b2dd8068152669aa8203 # v1
      with:
        toolchain: ${{ env.RUST_TOOLCHAIN }}
        components: rustfmt,clippy
    - if: inputs.targets != ''
      run: rustup target add ${{ inputs.targets }}
      shell: bash

    - name: Install nightly Rust
      id: nightly
      run: |
        NIGHTLY="nightly-2024-12-13"

        rustup toolchain install $NIGHTLY
        rustup component add rust-src --toolchain $NIGHTLY

        echo "nightly=$NIGHTLY" >> $GITHUB_OUTPUT
      shell: bash

    - name: Start sccache
      run: $SCCACHE_PATH --start-server
      shell: bash
